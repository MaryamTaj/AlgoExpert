def isValidSubsequence(array, sequence):
    # Write your code here.
    # Clarify assumptions:
    # Q. How do you deal with empty arrays? Ans. You only deal with non-empty
    # arrays of integers
    # Q. What if most of the numbers are in the first array, but not all? 
    # firstArray = [1,2,3,4], secondArray = [1,5,3,4]
    # A. It would return false.

    # ATTEMPT #1 (Incorrect):
    index = float('-inf')
    # Check if the second value in the sequence in array. If it is, 
    # and the index at which it is stored is greater than the last index,
    # keep iterating through the sequence.
    for i in range(0, len(sequence)):
        for j in range(index, len(array)):
            # Check if the sequence's value is in the array.
                if array[j] == sequence[i]:
                    index = j
                    break

        return False
                
    return True

    ATTEMPT #2 (Using hint):
    j = 0
    for i in range(0, len(array)):
        if array[i] == sequence[j]:
            j += 1
            if j == len(sequence):
                return True
    return False

    ATTEMPT #3 (March 24; Inefficient, but correct without using hint):
    
    def isValidSubsequence(array, sequence):
    # 1. Clarify assumptions.
    # Q. Suppose sequeunce repeats an integer that is in array. Is it a 
    # valid subsequence? Ex. Array = [1,2,3,4], Sequence = [2,2,2]
    # 2. Write pseudocode.

    idealSequence = []
    # Case 1: There is only one element. In this case, check if the element
    # is in the array
    if len(sequence) == 1 and sequence[0] in array:
        return True
     # Case 2: The sequence is the array itself
    elif sequence == array:
        return True  
    # Case 3: The elements of the sequence are not in the array.
    for i in range(len(sequence)):
        if sequence[i] not in array:
            return False
    # Case 4: The array contains duplicate elements, and the sequence
    # contains the same duplicate elements.
    count = 0
    duplicateValue = array[0]
    for i in range(len(array)):
        if array[i] == duplicateValue:
            count += 1
    if count == len(array):
        for i in range(len(sequence)):
            if sequence[i] not in array:
                return False
        return True
    else:               
    # Case 5: The elements of the sequence are in the array, but they are in 
    # the wrong order.
        for i in range(len(array)):
            # Access index of element in array, that is both in array and 
            # subsequence. Create what the subsequence should ideally look
            # like, if it preserves the order. Compare sequence with ideal
            # Sequence.
            if array[i] in sequence:
                idealSequence.append(array[i])
    
        
        if idealSequence == sequence:
            return True
        else: 
            return False

# Approach #4 (October 19, 2024): Intuitive
# 1. Clarify:
# Is [1] a subsequence for the array [1]? Yes.

# 2. Write pseudocode:
# Counter = -1
# Iterate through the array. Everytime I encounter a value that is in the 
# array and the sequence, I will increment the counter.
# I will then check if sequence[counter] == value.

# 3. Write code:
    counter = -1

    # Case 1: Sequence is a larger array than array.
    if len(sequence) > len(array):
        return False
        
    for i in range(0, len(array)):
        if array[i] in sequence: 
            counter += 1
            # Case 2: The order of the values in sequence is incorrect.
            if sequence[counter] != array[i]: 
                return False
            # Case 3: The order of the values is correct, and we have reached
            # the end of sequence.
            if counter == len(sequence) - 1:
                return True
    # Case 4: Array = [1,2,3,4]. Sequence = [1,2,3,3]. We have traversed the 
    # array, but we have not reached the end of sequence.
    return False
