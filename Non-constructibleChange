# 1. Clarify assumptions:
# Q. Can you have an empty array? Yes. It means you are given no coins, and
# the minimum amount of change that you can't create is 1. 
# Q. Are the given coins unique? No.
# Q. Do the given coins match the real-world coins? Ex. 1 cent, 5 cent, 10 cent
# 25 cent, etc.? No.
# Q. Can you reuse coins? No. Ex. [1, 2, 4]. I cannot do 1 + 2 + 2 to create 5
# cents. I would have to do 1 + 4.
def nonConstructibleChange(coins):
    # 2. Write pseudocode:

    # When coins does not contain 1 cent, or if it is empty, the minimum amount
    # of change you can't create is 1.
    if 1 not in coins or coins == []:
        return 1
    else:
        # Sort the coins in ascending order.
        coins.sort()
        change = 0
        # Iterate through the coins array, adding 1 coin at a time to the
        # amount of change you can make.
        for i in range(0, len(coins)):
            # Key insight: If the coin you are adding is larger than the
            # change you can currently make + 1, then the minimum amount of 
            # change you cannot make is your current change + 1
            if coins[i] > change + 1:
                return change + 1
            change += coins[i]
            
        # Otherwise, the minimum amount of change change you cannot make is 
        # the sum of all the coins + 1.
        return change + 1 

# Approach #2 (October 19, 2024):
    # Use the following website:
    # https://stackoverflow.com/questions/67099988/how-to-devise-this-solution-to-non-constructible-change-challenge-from-algoexper

    # Sort the array.
    coins.sort()
    
    # Initialize change created.
    changeCreated = 0
    
    for coin in coins:
        # If the next coin is greater than constructible change + 1, you
        # can create 1....constructible change = sum(coins_so_far). To create
        # constructible change + 1, you need the next coin <= constructible change
        # + 1. Otherwise, you will not be able to create constructible change + 1.
        if coin > changeCreated + 1:
            return changeCreated + 1
        changeCreated += coin
    
    # You cannot create the sum(coins) + 1.
    return changeCreated + 1
