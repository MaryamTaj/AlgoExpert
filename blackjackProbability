def blackjackProbability(target, startingHand):
    memo = {}
    return round(calculateProbability(target, startingHand, memo), 3)


def calculateProbability(target, currentHand, memo):
    if currentHand in memo:
        return memo[currentHand]
    if currentHand > target:
        return 1
    if currentHand >= target - 4:
        return 0

    # currentHand < target - 4
    totalProbability = 0
    for drawnCard in range(1, 11):
        totalProbability += 0.1 * calculateProbability(target, currentHand + drawnCard, memo)

    memo[currentHand] = totalProbability
    return totalProbability

# Time complexity: O(t - s), where t is the target and s is the startingHand
# Space complexity: O(t - s), where t is the target and s is the startingHand
