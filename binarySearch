
def binarySearch(array, target):
    # 1. Clarify assumptions.
    # Will the target integer always be in the sorted array of integers? No.
    # 2. Identify initial solution. Write pseudocode.
    
    # The left pointer represents the leftmost index of the input array.
    # The right pointer represents the rightmost index of the input array.
    left = 0
    right = len(array) - 1
    return modBinarySearch(array, target, left, right)

def modBinarySearch(array, target, left, right):
    middleIndex = (left + right) // 2

    # You cannot find the target in the array
    if left > right:
        return -1
    
    # Return the index
    elif array[middleIndex] == target:
        return middleIndex
    
    # Look in the second half
    elif array[middleIndex] < target:
        return modBinarySearch(array, target, middleIndex + 1, right)

    # Look in the first half
    elif array[middleIndex] > target:
        return modBinarySearch(array, target, left, middleIndex - 1)

    # 3. Write code.
    # 4. Test code.
    # 5. Optimize code (runtime analysis) = O(log n)
