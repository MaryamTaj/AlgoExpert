# Do not edit the class below except for
# the insert, contains, and remove methods.
# Feel free to add new properties and methods
# to the class.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, value):
        # Write your code here.
        # Do not edit the return statement of this method.
        # Base cases:
        # if value >= self.value and self.right == None, insert in right node.
        if value >= self.value and self.right is None:
            self.right = BST(value)
        # if value < self.value and self.left == None, insert in left node.
        elif value < self.value and self.left is None:
            self.left = BST(value)
        
        # Recursive cases:
        # if value >= self.value, insert in the right subtree.
        elif value >= self.value:
            self.right.insert(value)
        # if value < self.value, insert in the left subtree.
        elif value < self.value:
            self.left.insert(value)
        
        return self

    def contains(self, value):
        # Write your code here.
        # If value < self.value, check the left subtree.
        if value < self.value:
            if self.left is None:
                return False
            else:
                return self.left.contains(value)
        # if value > self.value, check the right subtree.
        elif value > self.value:
            if self.right is None:
                return False
            else:
                return self.right.contains(value)
        else:
            return True

    def delete_root(self):
        # This is a single node tree; do nothing.
        if self.right is None and self.left is None:
            pass
        # The first two cases were initially confusing me. I kept treating them
        # like the final case, where I need to extract the smallest value
        # in the right subtree, and replace it with the root. 
        elif self.left is None:
            self.value, self.right, self.left = self.right.value, self.right.right, self.right.left
        elif self.right is None:
            self.value, self.right, self.left = self.left.value, self.left.right, self.left.left
        else:
            self.value = self.right.extract_min()
            
    def extract_min(self):
        # If the right subtree is a single leaf, the leaf is the smallest value.
        if self.left is None and self.right is None:
            min_value = self.value
            self.value = None
            return min_value
        if self.left is None:
            # The minimum value is self.value
            min_value = self.value
            self.value, self.right, self.left = self.right.value, self.right.right, self.right.left
            return min_value
        else:
            # Since you will only call extract_min on the right subtree, and 
            # you are trying to find the smallest value in the right subtree,
            # you will keep travelling down to the left of the right subtree.
            self.left.extract_min()
            
    def remove(self, value):
        # Write your code here.
        # Do not edit the return statement of this method.
        
        # Find the node you want to remove.
        if self is None:
            return
        elif self.value == value:
            self.delete_root()
        elif value < self.value:
            if self.left is not None:
                self.left.remove(value)
        elif value > self.value:
            if self.right is not None:
                self.right.remove(value)
        

        
        return self

        
