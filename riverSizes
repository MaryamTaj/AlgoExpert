def riverSizes(matrix):
    # Initialize an empty array that will store river sizes in the input matrix.
    sizes = []
    # Initialize a "False" visited array.
    visited = [[False for value in row] for row in matrix]

    for i in range(0, len(matrix)):
        for j in range(0, len(matrix[0])):
            # If the node has not been visited yet, run BFS on it.
            if visited[i][j] == False:
                BFS(i, j, matrix, visited, sizes)

    return sizes

def BFS (i, j, matrix, visited, sizes):
    currentSize = 0
    
    nodesToExplore = [[i, j]]
    while len(nodesToExplore):
        # Extract the node from the queue
        currentNode = nodesToExplore.pop(0)
        i = currentNode[0]
        j = currentNode[1]

        # If the node has already been visited, explore other neighbors.
        if visited[i][j]:
            continue
        
        # If the node has not been visited yet, we are now visiting it.
        visited[i][j] = True
        # If the node is a 0, explore other neighbors.
        if matrix[i][j] == 0:
            continue

        # Add the unvisited neighbors with the value of 1 to the nodesToExplore array.
        currentSize += 1
        unvisitedNeighbors = getUnvisitedNeighbors(i, j, matrix, visited)
        for neighbor in unvisitedNeighbors:
            nodesToExplore.append(neighbor)

    if currentSize > 0:
        sizes.append(currentSize)

def getUnvisitedNeighbors(i, j, matrix, visited):
    unvisitedNeighbors = []

    # The node is not in the top row. Add the node above it.
    if i > 0 and visited[i - 1][j] == False:
        unvisitedNeighbors.append([i - 1, j])
    # The node is not in the bottom row. Add the node below it.
    if i < len(matrix) - 1 and visited[i + 1][j] == False:
        unvisitedNeighbors.append([i + 1, j])
    # The node is not in the leftmost row. Add the node to the left.
    if j > 0 and visited[i][j - 1] == False:
        unvisitedNeighbors.append([i, j - 1])
    # The node is not in the rightmost row. Add the node to the right.
    if j < len(matrix[0]) - 1 and visited[i][j + 1] == False:
        unvisitedNeighbors.append([i, j + 1])   

    return unvisitedNeighbors
        

            
    # 1. Clarify assumptions
    # 2. Identify initial solution (Write pseudocode)
    # 3. Write code
    # 4. Test code
    # 5. Optimize code (runtime analysis)
    # Runtime = O(n), n = total number of elements in the matrix
    # Space = O(n), n = total number of elements in the matrix
    
